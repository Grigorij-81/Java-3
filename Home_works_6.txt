public class Calculation {
        public int[] afterValue(int [] arr, int value) throws RuntimeException{
            boolean flag = false;
            for (int i = 0; i < arr.length; i++) {
                if (arr[i] == value) {
                    flag = true;
                    break;
                }
            }
            if (flag) {
                ArrayList<Integer> list = new ArrayList<Integer>();
                for (int i = arr.length - 1; i >= 0; i--){
                    if (arr[i] != value) {
                        list.add(arr[i]);
                    } else {
                        break;
                    }
                }
                int [] result = new int [list.size()];
                for (int i = 0; i < list.size(); i++) {
                    result[result.length - 1 - i] = list.get(i);
                }
                return result;
            } else {
                throw new RuntimeException("the array does not contain the passed value");
            }
        }

        public boolean onlyOneandFour(int [] arr){
            for (int i = 0; i < arr.length; i++) {
                if(arr[i] != 1 && arr[i] != 4){
                    return false;
                }
            }
            return true;
        }
//////////////////////////////////////////////////////

@RunWith(Parameterized.class)
public class Test {
    @Parameterized.Parameters
    public static Collection<Object []> data(){
        return Arrays.asList(new Object[][]{
                {new int[]{1, 2, 4, 4, 2, 3, 4, 1, 7}, new int[]{1, 7}},
                {new int[]{1, 2, 4, 4, 2, 3, 1, 1, 7}, new int[]{2, 3, 1, 1, 7}},
                {new int[]{1, 2, 4, 4, 2, 3, 4, 1, 4}, new int[]{}},
                {new int[]{4, 2, 1, 1, 2, 3, 1, 1, 7}, new int[]{2, 1, 1, 2, 3, 1, 1, 7}}
    });
}
    private int[] transmittedArray;
    private int[] resultArray;
    private Calculation calculation;

    public Test(int[] transmittedArray, int[] resultArray){
        this.transmittedArray = transmittedArray;
        this.resultArray = resultArray;
    }

    @Before
    public void init(){
        calculation = new Calculation();
    }

    @org.junit.Test
    public void testAfterValue(){
        Assert.assertArrayEquals(resultArray, calculation.afterValue(transmittedArray, 4));
    }

    @org.junit.Test(expected = RuntimeException.class)
    public void testException(){
    int [] arr = {1, 3, 1, 2, 3, 5, 1, 7,};
    calculation.afterValue(arr, 4);
    }    
}
///////////////////////////////////////////////////////////////////

@RunWith(Parameterized.class)
    public class BooleanTest {
        @Parameterized.Parameters
        public static Collection<Object []> data(){
            return Arrays.asList(new Object[][]{
                    {new int[]{1, 1, 4, 4}, new int[]{1, 2, 3, 4}},
                    {new int[]{4, 1, 4, 1}, new int[]{1, 1, 4, 3}}
            });
        }

        private int[] arrayTrue;
        private int[] arrayFalse;
        private Calculation calculation;

        public BooleanTest(int[] arrayTrue, int[] arrayFalse) {
            this.arrayTrue = arrayTrue;
            this.arrayFalse = arrayFalse;
        }

        @Before
        public void init(){
            calculation = new Calculation();
        }

        @Test
        public void testTrue(){
            Assert.assertTrue(calculation.onlyOneandFour(arrayTrue));
        }
        @Test
        public void testFalse(){
            Assert.assertFalse(calculation.onlyOneandFour(arrayFalse));
        }
}